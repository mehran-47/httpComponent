#!/usr/bin/env python3
import os, sys, netifaces as ni, shelve as sh
from http.server import BaseHTTPRequestHandler, HTTPServer
from subprocess import call

#HTTP server class
class WelcomeHandler(BaseHTTPRequestHandler):
    error_message_format = '<h1>Har har</h1>'
    def do_GET(self):
        if self.path == "/":
            self.send_response(200)
            self.send_header("Content-type","text/html")
            self.end_headers()
            self.wfile.write(bytes(htmlpage, 'UTF-8'))
        else:
            self.send_error(404, notfound)

if __name__ == '__main__':
    if not os.environ.get('SAFHTTPATT'):
        print("No CSI attribute found, quitting") 
        sys.exit()
    else:
        ip = ni.ifaddresses('eth0')[2][0]['addr']
        port = int(sys.argv[1])
        CSI_name = os.environ.get('SAFHTTPATT')
        component_name = str(os.environ.get('SA_AMF_COMPONENT_NAME'))

    #Getting environment variables to show in the web page and to store in the temporary DB.
    #DB has nothing to do with monitoring, kept for debugging purposes/ease of starting/ending http
    envVarStrings = ""
    for key in os.environ: envVarStrings+=str(key)+":"+ str(os.environ[key]) +"\n"
    with open('/opt/SA_stats/osaf_envs', 'w') as sf: sf.write(envVarStrings)
    with open('/opt/SA_stats/pid', 'w') as sf: sf.write(str(os.getpid()))
    try:
        db = sh.open('/opt/SA_stats/compDB.db', writeback=True)
        if not 'components' in db: db['components'] = {}
        db['PIDs'] = db['PIDs']+[os.getpid()] if 'PIDs' in db else [os.getpid()]
        db['osaf_envs'] = envVarStrings
        db['components'][component_name] = {'CSI':CSI_name, 'PID':os.getpid(), 'component':component_name, 'HAState':'Active'}
    finally:
        db.close()
    #Creating the main HTML page
    htmlpage = '<html><head><title>SAF Web</title></head><body><p>component name :'+component_name+'</p>\
    <p>CSI name :'+CSI_name+'</p>\
    </body></html>'
    notfound = "File not found"
    #Sending trace for the monitoring engine. A form of general instrumentation: command "/opt/httpComponent/send_trace.o <PID> <1>" or "/opt/httpComponent/send_trace.o <PID> <2>"
    #The 1 signifies 'component instatiation' trace creation, 0 would signify 'component termination'.
    call(['/opt/httpComponent/send_trace.o', str(os.getpid()), '1'])
    #passive monitoring
    call('amfpm --start -p'.split(' ')+ [str(os.getpid()), component_name])
    httpserver = HTTPServer((ip, port), WelcomeHandler)
    httpserver.serve_forever()